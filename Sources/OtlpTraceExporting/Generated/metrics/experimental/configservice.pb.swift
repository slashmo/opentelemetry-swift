// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: opentelemetry/proto/metrics/experimental/configservice.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct Opentelemetry_Proto_Metrics_Experimental_MetricConfigRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The resource for which configuration should be returned.
    var resource: Opentelemetry_Proto_Resource_V1_Resource {
        get { return self._resource ?? Opentelemetry_Proto_Resource_V1_Resource() }
        set { self._resource = newValue }
    }

    /// Returns true if `resource` has been explicitly set.
    var hasResource: Bool { return self._resource != nil }
    /// Clears the value of `resource`. Subsequent reads from it will return its default value.
    mutating func clearResource() { self._resource = nil }

    /// Optional. The value of MetricConfigResponse.fingerprint for the last
    /// configuration that the caller received and successfully applied.
    var lastKnownFingerprint: Data = Data()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _resource: Opentelemetry_Proto_Resource_V1_Resource?
}

struct Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Optional. The fingerprint associated with this MetricConfigResponse. Each
    /// change in configs yields a different fingerprint. The resource SHOULD copy
    /// this value to MetricConfigRequest.last_known_fingerprint for the next
    /// configuration request. If there are no changes between fingerprint and
    /// MetricConfigRequest.last_known_fingerprint, then all other fields besides
    /// fingerprint in the response are optional, or the same as the last update if
    /// present.
    ///
    /// The exact mechanics of generating the fingerprint is up to the
    /// implementation. However, a fingerprint must be deterministically determined
    /// by the configurations -- the same configuration will generate the same
    /// fingerprint on any instance of an implementation. Hence using a timestamp is
    /// unacceptable, but a deterministic hash is fine.
    var fingerprint: Data = Data()

    /// A single metric may match multiple schedules. In such cases, the schedule
    /// that specifies the smallest period is applied.
    ///
    /// Note, for optimization purposes, it is recommended to use as few schedules
    /// as possible to capture all required metric updates. Where you can be
    /// conservative, do take full advantage of the inclusion/exclusion patterns to
    /// capture as much of your targeted metrics.
    var schedules: [Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.Schedule] = []

    /// Optional. The client is suggested to wait this long (in seconds) before
    /// pinging the configuration service again.
    var suggestedWaitTimeSec: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// A Schedule is used to apply a particular scheduling configuration to
    /// a metric. If a metric name matches a schedule's patterns, then the metric
    /// adopts the configuration specified by the schedule.
    struct Schedule {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Metrics with names that match a rule in the inclusion_patterns are
        /// targeted by this schedule. Metrics that match the exclusion_patterns
        /// are not targeted for this schedule, even if they match an inclusion
        /// pattern.
        var exclusionPatterns: [Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.Schedule.Pattern] = []

        var inclusionPatterns: [Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.Schedule.Pattern] = []

        /// Describes the collection period for each metric in seconds.
        /// A period of 0 means to not export.
        var periodSec: Int32 = 0

        var unknownFields = SwiftProtobuf.UnknownStorage()

        /// A light-weight pattern that can match 1 or more
        /// metrics, for which this schedule will apply. The string is used to
        /// match against metric names. It should not exceed 100k characters.
        struct Pattern {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            var match: Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.Schedule.Pattern.OneOf_Match?

            /// matches the metric name exactly
            var equals: String {
                get {
                    if case .equals(let v)? = self.match { return v }
                    return String()
                }
                set { self.match = .equals(newValue) }
            }

            /// prefix-matches the metric name
            var startsWith: String {
                get {
                    if case .startsWith(let v)? = self.match { return v }
                    return String()
                }
                set { self.match = .startsWith(newValue) }
            }

            var unknownFields = SwiftProtobuf.UnknownStorage()

            enum OneOf_Match: Equatable {
                /// matches the metric name exactly
                case equals(String)
                /// prefix-matches the metric name
                case startsWith(String)

                #if !swift(>=4.1)
                static func == (lhs: Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.Schedule.Pattern.OneOf_Match, rhs: Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.Schedule.Pattern.OneOf_Match) -> Bool {
                    // The use of inline closures is to circumvent an issue where the compiler
                    // allocates stack space for every case branch when no optimizations are
                    // enabled. https://github.com/apple/swift-protobuf/issues/1034
                    switch (lhs, rhs) {
                    case (.equals, .equals): return {
                        guard case .equals(let l) = lhs, case .equals(let r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                    case (.startsWith, .startsWith): return {
                        guard case .startsWith(let l) = lhs, case .startsWith(let r) = rhs else { preconditionFailure() }
                        return l == r
                    }()
                    default: return false
                    }
                }
                #endif
            }

            init() {}
        }

        init() {}
    }

    init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "opentelemetry.proto.metrics.experimental"

extension Opentelemetry_Proto_Metrics_Experimental_MetricConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".MetricConfigRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "resource"),
        2: .standard(proto: "last_known_fingerprint"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._resource) }()
            case 2: try { try decoder.decodeSingularBytesField(value: &self.lastKnownFingerprint) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if let v = self._resource {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if !self.lastKnownFingerprint.isEmpty {
            try visitor.visitSingularBytesField(value: self.lastKnownFingerprint, fieldNumber: 2)
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Opentelemetry_Proto_Metrics_Experimental_MetricConfigRequest, rhs: Opentelemetry_Proto_Metrics_Experimental_MetricConfigRequest) -> Bool {
        if lhs._resource != rhs._resource { return false }
        if lhs.lastKnownFingerprint != rhs.lastKnownFingerprint { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".MetricConfigResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "fingerprint"),
        2: .same(proto: "schedules"),
        3: .standard(proto: "suggested_wait_time_sec"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularBytesField(value: &self.fingerprint) }()
            case 2: try { try decoder.decodeRepeatedMessageField(value: &self.schedules) }()
            case 3: try { try decoder.decodeSingularInt32Field(value: &self.suggestedWaitTimeSec) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.fingerprint.isEmpty {
            try visitor.visitSingularBytesField(value: self.fingerprint, fieldNumber: 1)
        }
        if !self.schedules.isEmpty {
            try visitor.visitRepeatedMessageField(value: self.schedules, fieldNumber: 2)
        }
        if self.suggestedWaitTimeSec != 0 {
            try visitor.visitSingularInt32Field(value: self.suggestedWaitTimeSec, fieldNumber: 3)
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse, rhs: Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse) -> Bool {
        if lhs.fingerprint != rhs.fingerprint { return false }
        if lhs.schedules != rhs.schedules { return false }
        if lhs.suggestedWaitTimeSec != rhs.suggestedWaitTimeSec { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.Schedule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.protoMessageName + ".Schedule"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "exclusion_patterns"),
        2: .standard(proto: "inclusion_patterns"),
        3: .standard(proto: "period_sec"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeRepeatedMessageField(value: &self.exclusionPatterns) }()
            case 2: try { try decoder.decodeRepeatedMessageField(value: &self.inclusionPatterns) }()
            case 3: try { try decoder.decodeSingularInt32Field(value: &self.periodSec) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.exclusionPatterns.isEmpty {
            try visitor.visitRepeatedMessageField(value: self.exclusionPatterns, fieldNumber: 1)
        }
        if !self.inclusionPatterns.isEmpty {
            try visitor.visitRepeatedMessageField(value: self.inclusionPatterns, fieldNumber: 2)
        }
        if self.periodSec != 0 {
            try visitor.visitSingularInt32Field(value: self.periodSec, fieldNumber: 3)
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.Schedule, rhs: Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.Schedule) -> Bool {
        if lhs.exclusionPatterns != rhs.exclusionPatterns { return false }
        if lhs.inclusionPatterns != rhs.inclusionPatterns { return false }
        if lhs.periodSec != rhs.periodSec { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.Schedule.Pattern: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.Schedule.protoMessageName + ".Pattern"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "equals"),
        2: .standard(proto: "starts_with"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                if self.match != nil { try decoder.handleConflictingOneOf() }
                var v: String?
                try decoder.decodeSingularStringField(value: &v)
                if let v = v { self.match = .equals(v) }
            }()
            case 2: try {
                if self.match != nil { try decoder.handleConflictingOneOf() }
                var v: String?
                try decoder.decodeSingularStringField(value: &v)
                if let v = v { self.match = .startsWith(v) }
            }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch self.match {
        case .equals?: try {
            guard case .equals(let v)? = self.match else { preconditionFailure() }
            try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        }()
        case .startsWith?: try {
            guard case .startsWith(let v)? = self.match else { preconditionFailure() }
            try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        }()
        case nil: break
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.Schedule.Pattern, rhs: Opentelemetry_Proto_Metrics_Experimental_MetricConfigResponse.Schedule.Pattern) -> Bool {
        if lhs.match != rhs.match { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

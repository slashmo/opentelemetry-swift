// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: opentelemetry/proto/logs/v1/logs.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2020, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

/// Possible values for LogRecord.SeverityNumber.
enum Opentelemetry_Proto_Logs_V1_SeverityNumber: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// UNSPECIFIED is the default SeverityNumber, it MUST NOT be used.
    case unspecified // = 0
    case trace // = 1
    case trace2 // = 2
    case trace3 // = 3
    case trace4 // = 4
    case debug // = 5
    case debug2 // = 6
    case debug3 // = 7
    case debug4 // = 8
    case info // = 9
    case info2 // = 10
    case info3 // = 11
    case info4 // = 12
    case warn // = 13
    case warn2 // = 14
    case warn3 // = 15
    case warn4 // = 16
    case error // = 17
    case error2 // = 18
    case error3 // = 19
    case error4 // = 20
    case fatal // = 21
    case fatal2 // = 22
    case fatal3 // = 23
    case fatal4 // = 24
    case UNRECOGNIZED(Int)

    init() {
        self = .unspecified
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .trace
        case 2: self = .trace2
        case 3: self = .trace3
        case 4: self = .trace4
        case 5: self = .debug
        case 6: self = .debug2
        case 7: self = .debug3
        case 8: self = .debug4
        case 9: self = .info
        case 10: self = .info2
        case 11: self = .info3
        case 12: self = .info4
        case 13: self = .warn
        case 14: self = .warn2
        case 15: self = .warn3
        case 16: self = .warn4
        case 17: self = .error
        case 18: self = .error2
        case 19: self = .error3
        case 20: self = .error4
        case 21: self = .fatal
        case 22: self = .fatal2
        case 23: self = .fatal3
        case 24: self = .fatal4
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .trace: return 1
        case .trace2: return 2
        case .trace3: return 3
        case .trace4: return 4
        case .debug: return 5
        case .debug2: return 6
        case .debug3: return 7
        case .debug4: return 8
        case .info: return 9
        case .info2: return 10
        case .info3: return 11
        case .info4: return 12
        case .warn: return 13
        case .warn2: return 14
        case .warn3: return 15
        case .warn4: return 16
        case .error: return 17
        case .error2: return 18
        case .error3: return 19
        case .error4: return 20
        case .fatal: return 21
        case .fatal2: return 22
        case .fatal3: return 23
        case .fatal4: return 24
        case .UNRECOGNIZED(let i): return i
        }
    }
}

#if swift(>=4.2)

extension Opentelemetry_Proto_Logs_V1_SeverityNumber: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Opentelemetry_Proto_Logs_V1_SeverityNumber] = [
        .unspecified,
        .trace,
        .trace2,
        .trace3,
        .trace4,
        .debug,
        .debug2,
        .debug3,
        .debug4,
        .info,
        .info2,
        .info3,
        .info4,
        .warn,
        .warn2,
        .warn3,
        .warn4,
        .error,
        .error2,
        .error3,
        .error4,
        .fatal,
        .fatal2,
        .fatal3,
        .fatal4,
    ]
}

#endif // swift(>=4.2)

/// Masks for LogRecord.flags field.
enum Opentelemetry_Proto_Logs_V1_LogRecordFlags: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case logRecordFlagUnspecified // = 0
    case logRecordFlagTraceFlagsMask // = 255
    case UNRECOGNIZED(Int)

    init() {
        self = .logRecordFlagUnspecified
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .logRecordFlagUnspecified
        case 255: self = .logRecordFlagTraceFlagsMask
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .logRecordFlagUnspecified: return 0
        case .logRecordFlagTraceFlagsMask: return 255
        case .UNRECOGNIZED(let i): return i
        }
    }
}

#if swift(>=4.2)

extension Opentelemetry_Proto_Logs_V1_LogRecordFlags: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Opentelemetry_Proto_Logs_V1_LogRecordFlags] = [
        .logRecordFlagUnspecified,
        .logRecordFlagTraceFlagsMask,
    ]
}

#endif // swift(>=4.2)

/// A collection of InstrumentationLibraryLogs from a Resource.
struct Opentelemetry_Proto_Logs_V1_ResourceLogs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The resource for the logs in this message.
    /// If this field is not set then resource info is unknown.
    var resource: Opentelemetry_Proto_Resource_V1_Resource {
        get { return self._resource ?? Opentelemetry_Proto_Resource_V1_Resource() }
        set { self._resource = newValue }
    }

    /// Returns true if `resource` has been explicitly set.
    var hasResource: Bool { return self._resource != nil }
    /// Clears the value of `resource`. Subsequent reads from it will return its default value.
    mutating func clearResource() { self._resource = nil }

    /// A list of InstrumentationLibraryLogs that originate from a resource.
    var instrumentationLibraryLogs: [Opentelemetry_Proto_Logs_V1_InstrumentationLibraryLogs] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _resource: Opentelemetry_Proto_Resource_V1_Resource?
}

/// A collection of Logs produced by an InstrumentationLibrary.
struct Opentelemetry_Proto_Logs_V1_InstrumentationLibraryLogs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The instrumentation library information for the logs in this message.
    /// Semantically when InstrumentationLibrary isn't set, it is equivalent with
    /// an empty instrumentation library name (unknown).
    var instrumentationLibrary: Opentelemetry_Proto_Common_V1_InstrumentationLibrary {
        get { return self._instrumentationLibrary ?? Opentelemetry_Proto_Common_V1_InstrumentationLibrary() }
        set { self._instrumentationLibrary = newValue }
    }

    /// Returns true if `instrumentationLibrary` has been explicitly set.
    var hasInstrumentationLibrary: Bool { return self._instrumentationLibrary != nil }
    /// Clears the value of `instrumentationLibrary`. Subsequent reads from it will return its default value.
    mutating func clearInstrumentationLibrary() { self._instrumentationLibrary = nil }

    /// A list of log records.
    var logs: [Opentelemetry_Proto_Logs_V1_LogRecord] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _instrumentationLibrary: Opentelemetry_Proto_Common_V1_InstrumentationLibrary?
}

/// A log record according to OpenTelemetry Log Data Model:
/// https://github.com/open-telemetry/oteps/blob/master/text/logs/0097-log-data-model.md
struct Opentelemetry_Proto_Logs_V1_LogRecord {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// time_unix_nano is the time when the event occurred.
    /// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
    /// Value of 0 indicates unknown or missing timestamp.
    var timeUnixNano: UInt64 = 0

    /// Numerical value of the severity, normalized to values described in Log Data Model.
    /// [Optional].
    var severityNumber: Opentelemetry_Proto_Logs_V1_SeverityNumber = .unspecified

    /// The severity text (also known as log level). The original string representation as
    /// it is known at the source. [Optional].
    var severityText: String = String()

    /// Short event identifier that does not contain varying parts. Name describes
    /// what happened (e.g. "ProcessStarted"). Recommended to be no longer than 50
    /// characters. Not guaranteed to be unique in any way. [Optional].
    var name: String = String()

    /// A value containing the body of the log record. Can be for example a human-readable
    /// string message (including multi-line) describing the event in a free form or it can
    /// be a structured data composed of arrays and maps of other values. [Optional].
    var body: Opentelemetry_Proto_Common_V1_AnyValue {
        get { return self._body ?? Opentelemetry_Proto_Common_V1_AnyValue() }
        set { self._body = newValue }
    }

    /// Returns true if `body` has been explicitly set.
    var hasBody: Bool { return self._body != nil }
    /// Clears the value of `body`. Subsequent reads from it will return its default value.
    mutating func clearBody() { self._body = nil }

    /// Additional attributes that describe the specific event occurrence. [Optional].
    var attributes: [Opentelemetry_Proto_Common_V1_KeyValue] = []

    var droppedAttributesCount: UInt32 = 0

    /// Flags, a bit field. 8 least significant bits are the trace flags as
    /// defined in W3C Trace Context specification. 24 most significant bits are reserved
    /// and must be set to 0. Readers must not assume that 24 most significant bits
    /// will be zero and must correctly mask the bits when reading 8-bit trace flag (use
    /// flags & TRACE_FLAGS_MASK). [Optional].
    var flags: UInt32 = 0

    /// A unique identifier for a trace. All logs from the same trace share
    /// the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
    /// is considered invalid. Can be set for logs that are part of request processing
    /// and have an assigned trace id. [Optional].
    var traceID: Data = Data()

    /// A unique identifier for a span within a trace, assigned when the span
    /// is created. The ID is an 8-byte array. An ID with all zeroes is considered
    /// invalid. Can be set for logs that are part of a particular processing span.
    /// If span_id is present trace_id SHOULD be also present. [Optional].
    var spanID: Data = Data()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _body: Opentelemetry_Proto_Common_V1_AnyValue?
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "opentelemetry.proto.logs.v1"

extension Opentelemetry_Proto_Logs_V1_SeverityNumber: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "SEVERITY_NUMBER_UNSPECIFIED"),
        1: .same(proto: "SEVERITY_NUMBER_TRACE"),
        2: .same(proto: "SEVERITY_NUMBER_TRACE2"),
        3: .same(proto: "SEVERITY_NUMBER_TRACE3"),
        4: .same(proto: "SEVERITY_NUMBER_TRACE4"),
        5: .same(proto: "SEVERITY_NUMBER_DEBUG"),
        6: .same(proto: "SEVERITY_NUMBER_DEBUG2"),
        7: .same(proto: "SEVERITY_NUMBER_DEBUG3"),
        8: .same(proto: "SEVERITY_NUMBER_DEBUG4"),
        9: .same(proto: "SEVERITY_NUMBER_INFO"),
        10: .same(proto: "SEVERITY_NUMBER_INFO2"),
        11: .same(proto: "SEVERITY_NUMBER_INFO3"),
        12: .same(proto: "SEVERITY_NUMBER_INFO4"),
        13: .same(proto: "SEVERITY_NUMBER_WARN"),
        14: .same(proto: "SEVERITY_NUMBER_WARN2"),
        15: .same(proto: "SEVERITY_NUMBER_WARN3"),
        16: .same(proto: "SEVERITY_NUMBER_WARN4"),
        17: .same(proto: "SEVERITY_NUMBER_ERROR"),
        18: .same(proto: "SEVERITY_NUMBER_ERROR2"),
        19: .same(proto: "SEVERITY_NUMBER_ERROR3"),
        20: .same(proto: "SEVERITY_NUMBER_ERROR4"),
        21: .same(proto: "SEVERITY_NUMBER_FATAL"),
        22: .same(proto: "SEVERITY_NUMBER_FATAL2"),
        23: .same(proto: "SEVERITY_NUMBER_FATAL3"),
        24: .same(proto: "SEVERITY_NUMBER_FATAL4"),
    ]
}

extension Opentelemetry_Proto_Logs_V1_LogRecordFlags: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "LOG_RECORD_FLAG_UNSPECIFIED"),
        255: .same(proto: "LOG_RECORD_FLAG_TRACE_FLAGS_MASK"),
    ]
}

extension Opentelemetry_Proto_Logs_V1_ResourceLogs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ResourceLogs"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "resource"),
        2: .standard(proto: "instrumentation_library_logs"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._resource) }()
            case 2: try { try decoder.decodeRepeatedMessageField(value: &self.instrumentationLibraryLogs) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if let v = self._resource {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if !self.instrumentationLibraryLogs.isEmpty {
            try visitor.visitRepeatedMessageField(value: self.instrumentationLibraryLogs, fieldNumber: 2)
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Opentelemetry_Proto_Logs_V1_ResourceLogs, rhs: Opentelemetry_Proto_Logs_V1_ResourceLogs) -> Bool {
        if lhs._resource != rhs._resource { return false }
        if lhs.instrumentationLibraryLogs != rhs.instrumentationLibraryLogs { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Opentelemetry_Proto_Logs_V1_InstrumentationLibraryLogs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".InstrumentationLibraryLogs"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "instrumentation_library"),
        2: .same(proto: "logs"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._instrumentationLibrary) }()
            case 2: try { try decoder.decodeRepeatedMessageField(value: &self.logs) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if let v = self._instrumentationLibrary {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if !self.logs.isEmpty {
            try visitor.visitRepeatedMessageField(value: self.logs, fieldNumber: 2)
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Opentelemetry_Proto_Logs_V1_InstrumentationLibraryLogs, rhs: Opentelemetry_Proto_Logs_V1_InstrumentationLibraryLogs) -> Bool {
        if lhs._instrumentationLibrary != rhs._instrumentationLibrary { return false }
        if lhs.logs != rhs.logs { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Opentelemetry_Proto_Logs_V1_LogRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".LogRecord"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "time_unix_nano"),
        2: .standard(proto: "severity_number"),
        3: .standard(proto: "severity_text"),
        4: .same(proto: "name"),
        5: .same(proto: "body"),
        6: .same(proto: "attributes"),
        7: .standard(proto: "dropped_attributes_count"),
        8: .same(proto: "flags"),
        9: .standard(proto: "trace_id"),
        10: .standard(proto: "span_id"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularFixed64Field(value: &self.timeUnixNano) }()
            case 2: try { try decoder.decodeSingularEnumField(value: &self.severityNumber) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.severityText) }()
            case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
            case 5: try { try decoder.decodeSingularMessageField(value: &self._body) }()
            case 6: try { try decoder.decodeRepeatedMessageField(value: &self.attributes) }()
            case 7: try { try decoder.decodeSingularUInt32Field(value: &self.droppedAttributesCount) }()
            case 8: try { try decoder.decodeSingularFixed32Field(value: &self.flags) }()
            case 9: try { try decoder.decodeSingularBytesField(value: &self.traceID) }()
            case 10: try { try decoder.decodeSingularBytesField(value: &self.spanID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.timeUnixNano != 0 {
            try visitor.visitSingularFixed64Field(value: self.timeUnixNano, fieldNumber: 1)
        }
        if self.severityNumber != .unspecified {
            try visitor.visitSingularEnumField(value: self.severityNumber, fieldNumber: 2)
        }
        if !self.severityText.isEmpty {
            try visitor.visitSingularStringField(value: self.severityText, fieldNumber: 3)
        }
        if !self.name.isEmpty {
            try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
        }
        if let v = self._body {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        }
        if !self.attributes.isEmpty {
            try visitor.visitRepeatedMessageField(value: self.attributes, fieldNumber: 6)
        }
        if self.droppedAttributesCount != 0 {
            try visitor.visitSingularUInt32Field(value: self.droppedAttributesCount, fieldNumber: 7)
        }
        if self.flags != 0 {
            try visitor.visitSingularFixed32Field(value: self.flags, fieldNumber: 8)
        }
        if !self.traceID.isEmpty {
            try visitor.visitSingularBytesField(value: self.traceID, fieldNumber: 9)
        }
        if !self.spanID.isEmpty {
            try visitor.visitSingularBytesField(value: self.spanID, fieldNumber: 10)
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Opentelemetry_Proto_Logs_V1_LogRecord, rhs: Opentelemetry_Proto_Logs_V1_LogRecord) -> Bool {
        if lhs.timeUnixNano != rhs.timeUnixNano { return false }
        if lhs.severityNumber != rhs.severityNumber { return false }
        if lhs.severityText != rhs.severityText { return false }
        if lhs.name != rhs.name { return false }
        if lhs._body != rhs._body { return false }
        if lhs.attributes != rhs.attributes { return false }
        if lhs.droppedAttributesCount != rhs.droppedAttributesCount { return false }
        if lhs.flags != rhs.flags { return false }
        if lhs.traceID != rhs.traceID { return false }
        if lhs.spanID != rhs.spanID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
